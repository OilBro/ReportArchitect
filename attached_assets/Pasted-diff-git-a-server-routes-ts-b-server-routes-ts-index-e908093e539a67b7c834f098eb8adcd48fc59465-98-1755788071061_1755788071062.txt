diff --git a/server/routes.ts b/server/routes.ts
index e908093e539a67b7c834f098eb8adcd48fc59465..985facfce8ecd5ff05fc84b2b41d3d834fe8037e 100644
--- a/server/routes.ts
+++ b/server/routes.ts
@@ -228,53 +228,54 @@ export async function registerRoutes(app: Express): Promise<Server> {
         }
         
         // Create checklist items if any
         if (result.checklistItems && result.checklistItems.length > 0) {
           console.log(`Creating ${result.checklistItems.length} checklist items`);
           
           for (const item of result.checklistItems) {
             try {
               await storage.createInspectionChecklist({
                 ...item,
                 reportId: createdReport.id
               });
             } catch (error) {
               console.error('Failed to create checklist item:', error);
             }
           }
         }
         
         // Update report with findings if present
         if (findings || reportWriteUp || recommendations || notes) {
           const updateData: any = {};
           if (findings) updateData.findings = findings;
           if (reportWriteUp) updateData.reportWriteUp = reportWriteUp;
           if (recommendations) updateData.recommendations = recommendations;
           if (notes) updateData.notes = notes;
-          
+
           // Note: We might need to add these fields to the schema if they don't exist
           console.log('Special fields to update:', updateData);
+          await storage.updateInspectionReport(createdReport.id, updateData);
         }
         
         res.json({
           success: true,
           message: `Successfully imported inspection report ${createdReport.reportNumber}`,
           reportId: createdReport.id,
           reportNumber: createdReport.reportNumber,
           importedData: result.importedData,
           thicknessMeasurements: result.thicknessMeasurements?.length || 0,
           checklistItems: result.checklistItems?.length || 0,
           totalRows: result.totalRows,
           preview: result.preview,
           aiInsights: {
             confidence: result.aiAnalysis.confidence,
             detectedColumns: result.aiAnalysis.detectedColumns,
             mappingSuggestions: result.aiAnalysis.mappingSuggestions
           }
         });
         
       } catch (validationError) {
         console.error('Report creation failed:', validationError);
         
         // Return the error but still show the extracted data
         res.status(400).json({
           success: false,
